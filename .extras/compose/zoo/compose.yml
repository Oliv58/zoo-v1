# Aufruf:   docker compose up
#           docker compose exec zoo bash   # "ash" bei Alpine
#             id
#             env
#             pwd
#             ls -l dist
#             hostname
#             cat /etc/os-release
#             ps                            # NUR Alpine
#           docker compose down

# ash = Almquist shell
# https://en.wikipedia.org/wiki/Almquist_shell

# Alpine mit busybox: "one binary to rule them all"
# https://www.busybox.net

# https://docs.docker.com/compose/compose-file
# https://docs.docker.com/compose/compose-file/compose-file-v3
# https://github.com/compose-spec/compose-spec/blob/master/schema/compose-spec.json

# https://docs.docker.com/compose/compose-file/14-include
# Der "service" fuer das DB-System muss fuer "depends_on" bekannt sein
include:
  - path: ../backend/compose.yml

# https://docs.docker.com/compose/compose-file/05-services
services:
  zoo:
    image: marcofrey/zoo:2025.4.1-bookworm
    #image: juergenzimmermann/zoo:2025.4.1-alpine
    depends_on:
      db:
        condition: service_healthy
    ports:
      - published: 3000
        target: 3000
    volumes:
      - type: bind
        source: app.yml
        target: /opt/app/dist/config/resources/app.yml
        read_only: true
      - type: bind
        source: ../../../log
        target: /tmp/log
        read_only: true
      - type: bind
        source: ../../../src/config/resources/tls/key.pem
        target: /opt/app/dist/config/resources/tls/key.pem
        read_only: true
      - type: bind
        source: ../../../src/config/resources/sqlite/zoo.sqlite
        target: /opt/app/dist/config/resources/sqlite/zoo.sqlite
    networks: [acme-network]
    env_file: .env
    #hostname: zoo
    cap_drop: [ALL]
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G

networks:
  acme-network:
    name: acme-network
